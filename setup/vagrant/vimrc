syntax on
filetype plugin on
filetype indent on

" set {{{1
set ignorecase
set smartcase
set tabstop=4
set softtabstop=4
set shiftwidth=4
set number
set title
set nocompatible
set noinsertmode
set ruler
set wildmode=list:longest
set wildmenu
set showmatch
set matchpairs+=<:>
set matchtime=3
set hidden
set nowrap
set list
set listchars=tab:\ \ ,trail:_,precedes:<,extends:>
set laststatus=2
set cmdheight=1
set showmode
set smartindent
set autoindent
set incsearch
set hlsearch
set wrapscan
set encoding=utf-8
set backspace=indent,start,eol
set fileformats=unix,dos,mac
set laststatus=2
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8p
set showcmd
set nrformats-=octal
set tags=./tags,../tags,~/tags
set viewdir=/home/vagrant/.backup/view
set backupdir=/home/vagrant/.backup/vim
set backup
set foldmethod=marker
set foldlevel=15
set completeopt+=longest
autocmd FileType python setl autoindent
autocmd FileType python setl smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd FileType python setl tabstop=8 expandtab shiftwidth=4 softtabstop=4
if exists('&ambiwidth')
	set ambiwidth=single
endif
let g:netrw_liststyle=1

" 自動文字コード判別 {{{1
set fileencoding=utf-8
set fileencodings=iso-2022-jp,sjis,utf-8,euc-jp
if has('autocmd')
	function! AU_ReCheck_FENC()
		if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
			let &fileencoding=&encoding
		endif
	endfunction
	autocmd BufReadPost * call AU_ReCheck_FENC()
endif

" 自動バックアップ {{{1
if has( "autocmd" )
	autocmd BufWritePre * call UpdateBackupFile()
	function! UpdateBackupFile()
		let dir = strftime("/home/vagrant/.backup/vim/%Y/%m/%d", localtime())
		if !isdirectory(dir)
			let retval = system("mkdir -p ".dir)
			let retval = system("chown 500:500 ".dir)
		endif
		exe "set backupdir=".dir
		unlet dir

		let time = strftime("%H_%M_%S", localtime())
		exe "set backupext=.".time
	endfunction
endif

" mapping {{{1
map <C-E>n :tabnew<CR>
map <C-E>o :tabe
map <C-E>c :tabc
map <C-E><Right> :tabn<CR>
map <C-E><Left> :tabp<CR>

nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz
nmap j gj
nmap k gk

nmap <ESC><ESC> :nohl<CR><ESC>

nmap \gc :cc<CR>
nmap \gp :cp<CR>
nmap \gP :cfirst<CR>
nmap \gn :cn<CR>
nmap \gN :clast<CR>

map \mm :set aw \| make \| set noaw<CR>
map \mn :set aw \| make clean \| make \| set noaw<CR>

map <C-T><C-T> :tabnew \| Explore<CR>
map <C-T><C-Y> :tabn<CR>
map <C-T><C-R> :tabp<CR>
map <C-T><C-G> :tabc<CR>
map! <C-T><C-T> <ESC>:tabnew \| Explore<CR>
map! <C-T><C-Y> <ESC>:tabn<CR>
map! <C-T><C-R> <ESC>:tabp<CR>
map! <C-T><C-G> <ESC>:tabc<CR>

map <C-E><C-E> :Explore<CR>
map! <C-E><C-E> <ESC>:Explore<CR>

map <C-P> <C-N>

if has( "clipboard" )
	vmap \d "+d
	vmap \D "+D
	vmap \y "+y
	vmap \Y "+Y
	vmap \p "+p
	vmap \P "+P
	nmap \d "+d
	nmap \D "+D
	nmap \y "+y
	nmap \Y "+Y
	nmap \p "+p
	nmap \P "+P
endif

" Color関係 {{{1
hi Pmenu ctermbg=4
hi PmenuSel ctermbg=1
hi PMenuSbar ctermbg=4
highlight Comment ctermfg=6

highlight ZenkakuSpace cterm=underline
match ZenkakuSpace /　/

" ファイル毎の設定 {{{1
if has( "autocmd" )
	autocmd FileType ruby set ts=2 sw=2 sts=2
	autocmd FileType actionscript :set dictionary=/home/vagrant/.vim/dict/actionscript3.dict
	autocmd FileType tex :set dictionary=/home/vagrant/.vim/dict/tex.dict
	autocmd FileType lecturememo :set dictionary=/home/vagrant/.vim/dict/tex.dict
	set complete+=k
endif

" errorformat関係 {{{1
if has( "autocmd" )
	autocmd filetype haskell set errorformat=
	autocmd filetype haskell set errorformat+=%f:%l:%c:\ %m
	autocmd filetype haskell set errorformat+=%f:%l:%c:
	autocmd filetype prolog set errorformat=
	autocmd filetype prolog set errorformat+=ERROR:\ %f:%l:%c:\ %m
endif
set errorformat+=%D%*\\a[%*\\d]:\ ディレクトリ\ `%f'\ に入りま<e3><81><99>
set errorformat+=%X%*\\a[%*\\d]:\ ディレクトリ\ `%f'\ から出ま<e3><81><99>

" いろいろ {{{1
if has( "autocmd" )
	autocmd BufReadPost *
				\ if line("'\"") > 0 && line("'\"") <= line("$") |
				\   exe "normal! g`\"" |
				\ endif
endif

if has( "autocmd" ) && exists( "+omnifunc" )
	autocmd Filetype *
				\   if &omnifunc == "" |
				\           setlocal omnifunc=syntaxcomplete#Complete |
				\   endif
endif

" plugin設定 {{{1
" autodate {{{2
let autodate_format="%Y/%m/%d %H:%M:%S"
" autocomplpop {{{2
let g:AutoComplPop_NotEnableAtStartup=1



""""""""""""""""""""""""""""
"プラグインのセットアップ
""""""""""""""""""""""""""""""
if has('vim_starting')
	set nocompatible
	set runtimepath+=/home/vagrant/.vim/bundle/neobundle.vim/
endif
call neobundle#begin(expand('/home/vagrant/.vim/bundle/'))
NeoBundle 'Shougo/neobundle.vim'
"NeoBundle 'Shougo/neocomplete'
"NeoBundle 'Shougo/neocomplcache'
NeoBundle 'VimClojure'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'jpalardy/vim-slime'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'vim-scripts/AnsiEsc.vim'
NeoBundle 'kana/vim-smartinput'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'mhinz/vim-startify'
NeoBundle "osyo-manga/vim-over"
NeoBundle 'taglist.vim'
NeoBundle 'Source-Explorer-srcexpl.vim'
NeoBundle 'SrcExpl'
NeoBundle 'thinca/vim-ref'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'honza/vim-snippets'
NeoBundle 'toyamarinyon/vim-swift'
NeoBundle 'davidhalter/jedi-vim'
call neobundle#end()

filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

if neobundle#is_installed('neocomplete')
    " neocomplete用設定
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_ignore_case = 1
    let g:neocomplete#enable_smart_case = 1
    if !exists('g:neocomplete#keyword_patterns')
    	let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns._ = '\h\w*'
elseif neobundle#is_installed('neocomplcache')
    " neocomplcache用設定
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_enable_ignore_case = 1
    let g:neocomplcache_enable_smart_case = 1
    if !exists('g:neocomplcache_keyword_patterns')
        let g:neocomplcache_keyword_patterns = {}
    endif
        let g:neocomplcache_keyword_patterns._ = '\h\w*'
        let g:neocomplcache_enable_camel_case_completion = 1
        let g:neocomplcache_enable_underbar_completion = 1
endif
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>""

" 入力モードで開始する
let g:unite_enable_start_insert=1
" バッファ一覧
noremap <C-P> :Unite buffer<CR>
" ファイル一覧
noremap <C-N> :Unite -buffer-name=file file<CR>
" 最近使ったファイルの一覧
" noremap <C-Z> :Unite file_mru<CR>
 
" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
" 初期設定関数を起動する
au FileType unite call s:unite_my_settings()
    function! s:unite_my_settings()
    " Overwrite settings.
endfunction

" 様々なショートカット
call unite#custom#substitute('file', '\$\w\+', '\=eval(submatch(0))', 200)
call unite#custom#substitute('file', '^@@', '\=fnamemodify(expand("#"), ":p:h")."/"', 2)


" grep検索の実行後にQuickFix Listを表示する
autocmd QuickFixCmdPost *grep* cwindow
" ステータス行に現在のgitブランチを表示する
set statusline+=%{fugitive#statusline()}

" multiple cursor
" default mapping off
let g:multi_cursor_use_default_mapping=0
" Default mapping
"let g:multi_cursor_next_key='<C-n>'
" let g:multi_cursor_prev_key='<C-p>'
" let g:multi_cursor_skip_key='<C-x>'
"let g:multi_cursor_quit_key='<Esc>'
let g:multi_cursor_next_key='<C-@>'
let g:multi_cursor_quit_key='<Esc>'

" ctags
" タグ生成コマンド
" ctags -h \".pm\" -R -f /home/game/git/sg-nouen/pm/Nouen/tagss `pwd`
" /home/vagrant/fqmn.pl /home/game/git/sg-nouen/pm/Nouen/tagss /home/game/git/sg-nouen/pm > /home/game/git/sg-nouen/pm/Nouen/tags
"let g:neocomplcache_ctags_arguments_list = {
"    \ 'perl' : '-R -h ".pm"',
"    \ }
"自動でプレビューを表示する。TODO:うざくなってきたら手動にする。またはソースを追う時だけ自動に変更する。
let g:SrcExpl_RefreshTime   = 0
"プレビューウインドウの高さ
let g:SrcExpl_WinHeight     = 9
"tagsは起動時に自動で作成する
let g:SrcExpl_UpdateTags    = 0
" 自動でアップデートしない
let g:SrcExpl_isUpdateTags = 0
""マッピング
let g:SrcExpl_RefreshMapKey = "<Space>"
let g:SrcExpl_GoBackMapKey  = "<C-b>"
nmap <F8> :SrcExplToggle<CR>
" Tlist
let Tlist_Ctags_Cmd='/usr/bin/ctags'
" SrcExplToggle
" タグのアップデードコマンド
let g:SrcExpl_updateTagsCmd = "/usr/bin/ctags --sort=foldcase -R ."
" NERDTree
nnoremap <silent><C-e> :NERDTreeToggle<CR>

" for snippets
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#snippets_directory='/home/vagrant/.vim/vim-snippets, /home/vagrant/dotfiles/snippets'

" <TAB>: completion.
imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#jumpable() ?  "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"

" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)"

let g:quickrun_config = {
\ 'swift' : {
\  'outputter/buffer/split' : ":botright",
\ }
\ }
""""""""""""""""""""""""""""""
